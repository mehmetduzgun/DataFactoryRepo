{
	"name": "scdT1Generic",
	"properties": {
		"description": "This is a generalized Slowly Changing Dimension Type 1 that is parameterized to work against different dimension tables and dimension types.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "BlobInputFolder",
						"type": "DatasetReference"
					},
					"name": "NewMembers1"
				},
				{
					"dataset": {
						"referenceName": "dbtest1",
						"type": "DatasetReference"
					},
					"name": "ExistingMembers"
				},
				{
					"dataset": {
						"referenceName": "dbtest1",
						"type": "DatasetReference"
					},
					"name": "SetMaxKey"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ParameterTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ParameterTable",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "PickCols1"
				},
				{
					"name": "PickCols2"
				},
				{
					"name": "Lookup1"
				},
				{
					"name": "checkMatch"
				},
				{
					"name": "UpdateSetAttrs"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "isMatching"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "InsertSetAttrs"
				},
				{
					"name": "Join1"
				},
				{
					"name": "SetCols"
				}
			],
			"script": "parameters{\n\tdimname as string ('Dimproducts'),\n\tkeycol as string ('ProductNumber'),\n\tSurrogateKey as string ('ProductID'),\n\ttablename as string ('Table_1')\n}\nsource(output(\n\t\tProductID as string,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as string,\n\t\tListPrice as string,\n\t\tSize as string,\n\t\tWeight as string,\n\t\tProductCategoryID as string,\n\t\tProductModelID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true) ~> NewMembers1\nsource(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductnumber as string,\n\t\tColor as string,\n\t\tStandardCost as integer,\n\t\tListPrice as integer,\n\t\tSize as integer,\n\t\tWeight as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingMembers\nsource(output(\n\t\tmaxsk as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (concat('select max(',$SurrogateKey,') as maxsk from ',$tablename)),\n\tformat: 'query') ~> SetMaxKey\nNewMembers1 derive(businesskey1 = toString(byPosition(2)),\n\t\tname1 = toString(byPosition(6))) ~> PickCols1\nExistingMembers derive(each(match(instr(name,'ID')>0), 'surrogatekey2' = toInteger($$)),\n\t\teach(match(instr(name,'Number')>0), 'businesskey2' = toString($$))) ~> PickCols2\nPickCols1, MapDrifted1 lookup(businesskey1 == businesskey2,\n\tmultiple: true,\n\tbroadcast: 'auto')~> Lookup1\nisMatching split(match,\n\tdisjoint: false) ~> checkMatch@(isMatch, noMatch)\ncheckMatch@isMatch derive({_LastUpdated} = currentTimestamp(),\n\t\tDWhash = sha2(256,name1)) ~> UpdateSetAttrs\nPickCols2 derive(ProductID = toInteger(byName('ProductID')),\n\t\tName = toString(byName('Name')),\n\t\tProductNumber = toString(byName('ProductNumber')),\n\t\tColor = toString(byName('Color')),\n\t\tStandardCost = toDecimal(byName('StandardCost')),\n\t\tListPrice = toDecimal(byName('ListPrice')),\n\t\t{_Inserted} = toTimestamp(byName('_Inserted')),\n\t\t{_LastUpdated} = toTimestamp(byName('_LastUpdated')),\n\t\tDWhash = toString(byName('DWhash')),\n\t\tbusinesskey2 = toString(byName('businesskey2')),\n\t\tsurrogatekey2 = toInteger(byName('surrogatekey2'))) ~> MapDrifted1\nLookup1 derive(match = isMatch()) ~> isMatching\nUpdateSetAttrs alterRow(updateIf(true())) ~> AlterRow1\ncheckMatch@noMatch keyGenerate(output(surrogatekey2 as long),\n\tstartAt: 1L) ~> SurrogateKey1\nJoin1 derive(surrogatekey2 = surrogatekey2 + maxsk,\n\t\t{_LastUpdated} = currentTimestamp(),\n\t\t{_Inserted} = currentTimestamp(),\n\t\tDWhash = sha2(256,name1)) ~> InsertSetAttrs\nSurrogateKey1, SetMaxKey join(true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nInsertSetAttrs select(mapColumn(\n\t\tName = name1,\n\t\t{_Inserted},\n\t\t{_LastUpdated},\n\t\teach(match(name=='surrogatekey2'),\n\t\t\t$SurrogateKey+'' = $$),\n\t\teach(match(name=='businesskey1'),\n\t\t\t$keycol+'' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SetCols\nAlterRow1 sink(input(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductnumber as string,\n\t\tColor as string,\n\t\tStandardCost as integer,\n\t\tListPrice as integer,\n\t\tSize as integer,\n\t\tWeight as integer,\n\t\tProductCategoryID as integer,\n\t\tProductModelID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:[($keycol)],\n\tformat: 'table',\n\tmapColumn(\n\t\tProductID = checkMatch@isMatch@ProductID,\n\t\tName = checkMatch@isMatch@Name,\n\t\tProductnumber = checkMatch@isMatch@Productnumber,\n\t\tColor = checkMatch@isMatch@Color,\n\t\tStandardCost = checkMatch@isMatch@StandardCost,\n\t\tListPrice = checkMatch@isMatch@ListPrice,\n\t\tSize = checkMatch@isMatch@Size,\n\t\tWeight = checkMatch@isMatch@Weight,\n\t\tProductCategoryID = checkMatch@isMatch@ProductCategoryID,\n\t\tProductModelID = checkMatch@isMatch@ProductModelID\n\t),\n\tpartitionBy('hash', 1),\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nSetCols sink(input(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductnumber as string,\n\t\tColor as string,\n\t\tStandardCost as integer,\n\t\tListPrice as integer,\n\t\tSize as integer,\n\t\tWeight as integer,\n\t\tProductCategoryID as integer,\n\t\tProductModelID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tName\n\t),\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
		}
	}
}